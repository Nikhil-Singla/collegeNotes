Youtube: Neso Academy
Introduction to Theory of Computation:
-> Most fundamental courses of Comp Sci: Subject about what things you can compute mechanically and with how fast/how much space taken.

Things you can compute:
Strings which follow certain rules (eg. Binary strings that end in 0)
Machine that accepts all valid Java code (eg. Compilers)
Compilers arose from theory of computation

Things you cannot compute:
Program that accepts all valid java codes and never goes into infinite loop. (Cannot check for infinite loop)

Subject: Design systems that take input and return yes or no.
Layers: 
1. FSM : Finite state machine - Simplest model and limited memory/calculations)
2. CFL : Context free language - More powerful, slightly higher level computations) 
    Language actually refers to a set of strings.
3. Turing Machine 
4. Undecidable : Problems that cannot be solved

Video 2:
Finite state machine - 
Symbol - a, b, c, 1, 2, 3
Alphabet - Collection of symbols (Denoted by Σ) {a, b}, {d, e, f, g}, {0, 1, 2 . . .}
String - Sequence of symbols. eg: a, b, aa, bb, ab, 01, 1011
Language - Set of strings 

Example: if Σ = {0, 1}
Language (L1: Finite Set) = Set of strings of length 2 = {00, 01, 10, 11}
Language (L2: Finite Set) = Set of strings of length 3 = {000, 001, 010, 011, 100, 101, 110, 111}
Language (L3: Infinite Set) = Set of strings that begin with 0 = {0, 01, 001, 010, 000, 000010 . . .}

Powers of Σ:
¹²³⁴⁵⁶⁷⁸⁹⁰
₀₁₂₃₄₅₆₇₈₉
Σ = {0, 1}
Σ⁰ = Set of all strings of length 0 = {ε}
Σ¹ = Set of all strings of length 1 = {0, 1}
Σ² = Set of all strings of length 2 = {00, 01, 10, 11}
Σ³ = . . .
Σⁿ = Set of all strings of length n.

Cardinality: Number of elements in the set. 
Σ⁰ = 1
Σ¹ = 2
Σ² = 4 . . .Σⁿ = 2ⁿ

Σ* = Σ⁰ U Σ¹ U Σ² U Σ³ . . . U Σⁿ = Set of all possible strings of all lengths using the alphabets Σ

Video 3:
Finite state machines = Finite Automata [Simplest model and limited memory]
2 Types : FA (Finite Automata) with Output and FA without Output

FA w/ Output => Moore Machine and Mealy Machine
FA w/o Output => DFA (Deterministic FA), NFA (Non-Deterministic FA) and ε-NFA (Epsilon NFA)

DFA: Deterministic Finite Automata
(Diagram in Video)
Edges = Arrows between states.
State = Circles with letter between them
Labelling on the edges = Value of input to transition between the states
Start State = Using an arrow from nowhere to point to the state
End State = Double Circle for a state

Defined using 5 tuples: (Q, Σ, q₀, F, 𝝳)
Q = Set of all states
Σ = Inputs
q₀ = Start State
F = Set of final states
𝝳 = Transition function that maps Q x Σ -> Q

Q = {A, B, C, D}
Σ = {0, 1}
q₀ = A
F = {D}
𝝳 = 
.   0   1
A   C   B
B   D   A
C   A   D
D   B   C

To make creation of a DFA easier:
1) Start by writing out the elements of the DFA set.
2) Create the start state.
3) Check for both inputs from the start state.
4) Make sure you have the appropriate final states whenever you need to.
5) Dont forget to fill out the self loops and other inputs for every state.

Dead State = Where the input cannot proceed forward to the final state. If a string gets trapped in dead state, its rejected.
