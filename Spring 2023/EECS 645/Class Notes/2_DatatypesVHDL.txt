Definition of Datatype:
    Set of values that an object can assume [Dynamic range] AND
    Set of operations that can be performed on that object

VHDL is strongly typed.
Mismatch causes an error and needs typecasting/typeconversion.

Integer:
    Minimal range -(2^31 - 1) to +(2^31 - 1)
    Subtypes include natural, positive.
Boolean:
    False, True. 
Bit:
    '1', or '0', not too powerful. 1 bit vector translates into a group of wire called a bus

STD_logic_package adds more power to bit with the single wire modelling. It has more values (9 types) and the package needs 
    to be invoked to use. [.all uses everything in the package invocation]
The package helps in simulating scenario of ports and see if the code can work in real life applications.
    0 means ground and 1 means power supply in a digital logic circuit. 
If 1 is connected to 0, it results in a short circuit/explosion and is represented by 'X' in the package, etc.

How to infer arithmetic operators: numeric_std package (Defines types flexible in bits)
In standard VHDL, sum <= a + b;
** Integer is 32 bits (precision)
What's wrong with integer? : Overflow, or Underuse of Memory Space.
There's no type to use less number of bits either.

In numeric_std:
There are unsigned and signed data types. An array is interpreted as an unsigned or signed binary number.
15 down to 0 implies 16 bits. Package also defines addition "+" for these datatypes.
Package needs to be invoked too though.

Conversion can be done using typecasting.
data type of a          to data type
std_logic_vector        signed              => signed(a)
.                       unsigned            => unsigned(a)
unsigned, signed        std_logic_vector    => std_logic_vector(a)

unsigned, signed        integer             => to_integer(a)
natural                 unsigned            => to_unsigned(a, size)
integer                 signed              => to_signed(a, size)

Non-IEEE packages
Packages by Synopsys. Tool vendors frequently store them in ieee library.

std_logic_unsigned / std_logic_signed [Overloads; convenient, but ruins the motivation of strongly typed language], numeric_std is preferred. 

[Quick reference card: Posted on canvas] : Use sections 2.2 and 2.4 for Homework

Summary of VHDL using synthesizable concurrent VHDL statements: [While everything is simulatable, summary statements are also synthesizable]
1) Direct Assignment -> Dataflow Style
    Left hand side, assign to it something from right hand side using the '<=' symbol.
    Right hand side could also be regular boolean expressions.
    "mux" is Multiplexer: It is a selecter that selects 1 out of 4 depending on the select signal. 2^select size signal
Everything in VHD translates to physical object
DataFlow style is direct assignment as its flowing being assigned to an expression.

Numeric std package:
Defines integer as array of elements of STD_logic.

Type conversion between data types:
- If they're closely related : Type casting
Ex: unsigned (bitstring) and std_logic

- If they're not linked, we have specific conversion function 
Ex: unsigned and integer (decimal data structure)

Negative bits more than required (-3 in 5 bits) is signed extension by adding (1's at the beginning of a negative number after
minimum bits representation of -3).

2) PROCESS Statement -> Behavioral Style
a) -> IF-THEN-ELSE statement
While process as a whole is concurrent, sometimes inside of it might be sequential due to if-else flow.
* Between begin and main heading keyword, we can declare internal signals/wires.
VHDL is case insensitive but conventionally, keywords are all caps.
    IF statements convert to logic gates from logical functions.
    Sensitivity List: Process is sensitive to any event that happens to any of these signals.
    Usually syntax is similar to the parameters of a function in any other programming language.
    Event: Any change in the value of the signals/variable.
    The sensitivity list is determined by the inputs of the function/ anything that you read in the process.
    Short-circuit in IF statement: Whenever an IF condition is evaluated true, the rest of the statements are not.
    Shorter-inertial delay vs longer-intertial detail depends on the IF statement order; First IF statement has higher prio

b) -> CASE statement
Similar functioning to switch statement, but no notion of priority unlike IF-ELSE-THEN statement.

c) Resettable Flip-Flop (D-FF) Interface
    Main use of Flip-Flop is memory as it stores its input.
    !! Multi-bit memory element AKA register -> Group of Flip-Flops put side by side but sharing same clock and reset.
        8 bit register = 8 flip-flops = 8 bits = 1 byte.
    Multiple registers together => Memory
    Synchronous reset -> RESET ACTION IS SYNCHRONIZED TO THE CLOCK.
    Otherwise, Asynch reset -> RESET ACTION IS NOT SYNCHRONIZED TO THE CLOCK [Check slides for architecture]
    [SLIDES] Look at d, it won't matter in PROCESS senstivity list, because firing the process depends only on clk/rst depending        
>            on the structure being asynch or synch.

Behavioral is quicker to design and implement than structure, but structural is more involved and less prone to error as the
    programmer can design the structure.

3) COMPONENT Instantiation -> Structural Style
In OOP, you create smallest individual objects and then instantiate an object from it.
Similarly, COMPONENT instantiation is also creating a chart for any unit and then implementing it component wise.
First design its components, and then design (my_gate) the final thing.
=> is called "Map to" or connect to.
    That is "a => S1" means map the a to S1 of the bigger architecture after the not gate is run <Lecture slides>. 

4) GENERATE statement -> Structural Style
Use FOR generate loop to generate the COMPONENT that is very large in number.
You can use nested generate statements to create even more strucutral outputs/components.
