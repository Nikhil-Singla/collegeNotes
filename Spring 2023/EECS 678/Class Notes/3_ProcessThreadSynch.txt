OS Service:
    Resource allocation, filesystem, IO operations etc.
OS Interface
    System call is how you access OS functionality.

Process Concept, Context switching

Process:
OS abstraction that represents a running application
It has three main components:
    1) Address space:
    Process's view of memory that includes program code, global variables, dynamic memory and stack.
    2) Processors state:
    Program counter (PC), stack pointer, and other CPU registers.
    3) OS resources
    Various OS resources that the process uses like open files, sockets, accounting information etc.

Process Address Space:
Text    : Program Code
Data    : Global Variables
Heap    : Dynamically Allocated memory (malloc())
Stack   : Temporary Variables (grow at each function call)

Process Address Space:
Each has own private address space => 4GB or 2^32 bytes of continuous memory in 32 bit machine
Each has same range (eg. 0x0 ~ 0xffffffff)
How is it possible if less than 4GB of DRAM:
    Virtual Memory (OS provides this ILLUSIOn)

Process state:
running : instruction executed
waiting : process waiting for event to occur
ready   : process waiting to be assigned to processor

Number of running is equal to number of cores
State diagram =>
new (admitted) -> ready (interrupt/scheduler dispatch) -> running (exit) -> terminated
or                                                       running (IO/event wait) -> waiting (IO/event completion) -> running

Process Control Block (PCB)
- Information associated with each process
    - Process ID
    - Process state
    - CPU 
        registers
        scehduling information
    - Memory management info
    – Accounting information
    – OS resources

Process Scheduling:
    - Decides which process to run next (only ready processes)
    - OS has multiple scheduling queues; Ready queue (ready to be executed), and Device queue (processes waiting for I/O)

Context Switching:
    Suspend current process and resume next one from last suspended state.

You dont save memory due to virtual memory that means there is only the need to save register state.
Cache data of previous process is not useful for new process
Overhead: Save and restore CPU states (warm-up instruction and data cache)
1.8 Micro seconds on 2.8 GhZ translates to 5040 (1.8*2.8*1000) cycles as its 1 nanosecond per cycle.

Process Creation: Made using system calls (fork()/ exec())
Process Termination:
    Normal termination : exit() system call which exits by itself and returns status data, with deallocation of rss.
    Forced termination : kill() system call
    Zombie process     : if no parent, did not invoke wait().
    Orphan process     : parent was terminated first.