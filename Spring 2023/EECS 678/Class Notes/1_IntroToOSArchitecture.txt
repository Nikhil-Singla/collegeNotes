Introduction to OS:
-Syllabus
Check out research website, Quizzes once a week.
OS is everywhere: Computer, Smartphone, Cars, etc.
What is OS:
1) User - An easy to use virtual machine by hiding complex details (CPU, Memory, Where to store the data) and 
    providing API's and services (read, write, filesystems).
2) System - A resource manager (for the CPU, memory, storage etc), to make sure everyone gets fair share of
    resources. Monitor/prevent errors and improper use.

OS is a program that always runs (typically in kernel mode)
Why is it needed?
- Programmability: Don't need to know hardware details to do stuff.

Memory Isolation:
- Data stored can only be accessed by authorized.
- Foundation of security.
- Enforced by hardware
-

Meltdown Attack
Attack exploits Intels  . . . 
[Skipped]

OS Design Issues: [Slides]

Why do I need to study OS:
User: Better tune the OS to improve performance.
Programmer: Efficient programming by knowing how OS works.
Hacker: Need to know system to break it.

What is OS?
Program that always runs (in kernel mode) as an intermediary between the user and the hardware for resource management.
It can be thought of as an easy to use VM providing API's and services.

Ada Lovelace: First programmer who wrote a paper/appendix on Babbage's analytical machine on early computing machines.

History: Vaccum Tubes -> Transistors -> IC (integrated circuits) -> VLSI [Smaller, faster and more reliable]

Evolution of OS: 
1) Batch systems: Submit job on punch cards, collect batch of jobs, read and OS process one job at a time
    Problem: CPU is underutilized to wait I/O operations. No interactivity
2) Multiprogramming: Multiple running jobs and I/O and compute can overlap with the goal to maximize system throughput 
    (OS - IBM OS/360)
3) Timesharing: Multiple interactive users share machine; Accesses machine via terminal; 
    Gives each user illusion of using entire machine. OS Goal: Optimize response time [UNIX OS]

4) Parallel computing: Multiple CPU/cores to speed up performance. OS Goal: Fast synchronization and max util
5) Distributed computing: Physically separate networked computers
6) Virtualization: Multple OSes on a single machine
    
Challenges for future OS
1) Heterogenous multicore processors 
[SLIDES]

Summary:
    Learn about major OS components [Structure, interface, mechanisms, policies and algorithms]
    Help understand foundation of computing systems.
    Understand various engineering tradeoffs.

** Recap **
Evolution of OS

Computer Architecture and OS:
    CPU, Memory and disk.
    Trends, Impact on OS.
    Architectural support for OS

OS talks to hardware, need to know features and drives new hardware features as OS requires.

CPU:
    Brain of computer: Fetch instructions, decode, execute and store on memor/registers.

Moore's Law
    Transistors double every one or two years. 5.56 billion in an 19-core Intel Xeon Haswell-E5
    114 billion in Apple M1 Ultra

Single core CPU:
- Job of OS is time-sharing (when to schedule which task)
When multicore: Parallel Computing
- Which task to which cores
    ** => May have performance implications due to cache contention -> Contention-aware scheduling

Multiprocessor:
Shared cache: That lets you access memory belonging to other processors.
- Non-uniform memory access (NUMA) Architecture
    - Memory costs vary significantly: local vs remote
    - Which task to which processors?

Memory Hierarchy:
1) Main memory : 
    DRAM [Fast and volatile, but expensive relative to disk]
    CPU has direct access.
2) Disk : 
    Hard disks, solid-state disks [Slow, non-volatile, inexpensive]
    CPU doesn't have direct access

If CPU is 1 clock cycle, 1 GHz/1 nanosecond
Time to register, access and cache main memory: 100 nanoseconds

Caching: A very important principle applied in all layers of hardware, OS and software.
- Put frequently accessed data in small amount of faster memory
- Fast, most of the time (hit)
- Copy from slower memory to cache (miss)

Ballpark speed: 1ns -> 10ns -> 100ns -> 20 micro seconds -> 5 milliseconds

Interrupt:
- Signal to tell the processor "do something now!"
Hardware Interrupts: Devices (timer, disk, keyboard, ...) to CPU

Interrupt Handling:
- Save CPU states (registers)
- Execute the associated interupt service routine (ISR)
- Restore the CPU states

Recap:  
OS needs to understand architecture  - Hardware (CPU, memory, disk) trends and their implications
Architecture needs to support OS - Interrupts, timer, MMU, User/kernel mode and privileged instrcutions.
Memory Hierarchy -> 1ns -> 10ns -> 100ns -> 20 micro seconds -> 5 milliseconds