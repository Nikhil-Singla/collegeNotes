Youtube: Neso Academy
Video 26:
Example filling

Video 27: Finite Automata with output.

Mealy Machine. 6 tuples: 
Q - Finite set of states
Œî - Set of output Alphabets
Œ£ - Finite set of non empty set of Input Alphabets
q‚ÇÄ - Initial/Start state
Œª - Output function : Œ£ x Q -> Œî
ùù≥ - Transition function : Q x Œ£ -> Q

** SUPER IMPORTANT CONCEPT **
So when we have 1/a on the number, it states that A on getting input 1, goes to A itself, AND PRODUCES OUTPUT b!!!

Now we have outputs defined along with inputs and current state/transition! Output is defined by current input in the current state.

Moore Machine:
Q - Finite set of states
Œî - Set of output Alphabets
Œ£ - Finite set of non empty set of Input Alphabets
q‚ÇÄ - Initial/Start state
Œª - Output function : Q -> Œî
ùù≥ - Transition function : Q x Œ£ -> Q

Here, only Œª (lambda) changes now instead of being mapped to input. Its just mapped to the state itself. 
This means that when the transition reaches a specific state, it produces an output from that state itself!!
Here also, the start state, BEFORE ANY INPUT, gives an output to start us off. Then we check the inputs. 

Mealy machine, on input of length 4, gives output of length 4. IE -> n length input = n length output
Moore machine on the other hand means, n length input -> n+1 length output due to START state.

Video 28: Construction of Mealy machine
Example 1: 1's complement.
Simple machine -> A start state, on input 1 gives output 0 and on input 0, gives output 1.
One state is enough for the answer.

Example 2: Print's "a" when sequence "01" is encountered in the input binary string.
First construct the DFA that accepts 01 ending string.
Then print the target state with output a, and then every other output can simply print b.

Video 29:
In Example 3 we can denote acceptance of a string by printing 1 at the end when we get the desired input, otherwise printing 0 when the alphabets range between a and b 
and we need to get aa, bb to print a 1.

Video 30:
2's complement Mealy machine. Neglect last carry bit. The pattern arises that after you see the first 1, every bit after that is complemented for the final answer.

MSB            LSB 
 1  0  0  0  1  0

Read from Least Significant Bit to Most SB
2's complement of above number = 011110

We need 2 states, and send after 1 to a different state that complements stuff.

Video 31: Construct Moore machine
Only here, the output is associated with the states.
Ex: Prints 'a' when we get sequence 01.
Three states, A - B and C. A goes to B on getting 0 and B to C on getting 1. 
A and B remain in other inputs, and for C, 0 goes to B, and for 1, goes to A. 
And when we reach C, that's when we get 01, thus we output a on state C.
Other two states will have a b state.

Video 32: Moore machine that counts 'abb' in any input over {a, b}
First construct DFA that accepts abb. And output the end of the DFA to be 1. At the end, we can count the number of 1's to count abb.
Every other state gives output 0 so that we can use 1 to count.

Video 33: Table to solve Moore machine.
Rememeber properties, start state and the property that your output starts BEFORE EVEN THE INPUT.

Video 34: Conversion of Moore to Mealy Machine
Moore machine, Output associated with the states. Mealy machine, outputs associated with the transitions.
Conversion is super simple, just check the output of the state the transition is going towards and then make that output the transition output.
After this, remove the state outputs, and you will have the answer.

Video 36:
For table conversion, just have the state it will go to and the output next to that state to have the final answer.

Video 37:
Convert Mealy to Moore machine.
Logically, just convert states into Ba and Bb for the outputs "a" and "b" and then convert the state diagrams using basic logic of the old B state for both Ba and Bb.
Similarly for all other states where a change has to be made.

Moore -> Mealy, states remain same.
Mealy -> Moore, states increased. At max, x*y states where x is states and y is number of outputs.
If there is something non-associated, then you can leave it as is. 

Video 38:
Start by making clear what the input, outputs are for a given problem. 
In Mealy, output are associated with transitions. We need to associate them with states for Moore.

Video 39: 2's complement Mealy to Moore.
Just 3 states, one extra for B/0 and B/1 => state/outputs.
Not exactly similar due to extra bit with the start state, but its okay. 

Video 40:
Using tables for conversion
- Start by checking all the states and see if the state gives different outputs for certain inputs.
- Example, if we have q1, that gives q1/0 sometimes, other times q1/1. So split the state into two states.
- Draw the table logically with these two extra states.
And then fill out the output column and then remove the transition outputs.

Video 41:
Epsilon NFA - Essentially you define an NFA with the extra case of what if you get no input. (or the input Œµ)
Property - Every state on Œµ goes to itself ALONG with any other states mentioned otherwise...

Video 42: To convert Œµ-NFA to equivalent NFA, 
we need to check the state with Œµ* then with the input and then again with the Œµ* [Œµ* = Epsilon closure]
Œµ* means all the states that can be reached from a particular state by seeing only the Œµ symbol
For example, if A goes to B and B goes to C on seeing Œµ
The Œµ* of A is A, B and C [Every state goes to itself on Œµ]
We need to check the transition by threee steps as mentioned above when converting. 
First obv check Œµ*, then for each of the states from Œµ*, check their respective values at a particular input, 0 or 1 [here], and then finally
also check where these inputs go on Œµ* again. This way, the union of the final column gives all the possible states our given state travels to for 
a particular input.
For this, our FINAL STATES = All the states that can reach the final only by seeing the Epsilon state.

Video 43: Keep in mind the phi that goes nowhere.

Video 45: Regular expressions
Used to represent certain sets of strings in an algebraic fashion.
Rules: Any termnial symbols, including empty and null symbols are regular expressions.
Union of two regular expression is regular.
Concatenation of two regular expression is also regular.
Iteration/Closure of regex is also a regular expression, ie A* or R* etc.
Regex over Œ£ are obtained by applying above rules as many times as needed.

Video 46:
{0, 1, 2} = 0 + 1 + 2 denotes => 0 or 1 or 2
{^, ab} = ^ ab denotes => Empty symbol OR ab. When you have the empty symbol, you don't need to denote it in any way
{abb, a, b, bba} = abb + a + b + bba 
{^, 0, 00, 000. . .} = Closure of 0 = 0*
{1, 11, 111, 1111. . . } = Not closure but = 1‚Å∫ which excludes the empty set.
 
Video 47:
Identities of Regex
1. œï + R = R
2. œïR + Rœï = œï
Note: Epsilon = ^ or Œµ.
3. ^R = ŒµR = R
4. Œµ* = Œµ. œï* = Œµ
5. R + R = r
6. R*R* = R*
7. RR* = R*R = R‚Å∫ as concatenation with R excludes the empty 

Video 48:
P and Q are two Regex over Œ£ and P doesn't contain Œµ then R = Q + RP has a unique solution R = QP*
Ardens theorem proof if needed.