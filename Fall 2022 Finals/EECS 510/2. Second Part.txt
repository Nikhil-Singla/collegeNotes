Youtube: Neso Academy
Video 11:
Definition of NFA => 
Defined using 5 tuples: (Q, Œ£, q‚ÇÄ, F, ùù≥)
Q = Set of all states       -> {A, B}
Œ£ = Input                   -> {0, 1}
q‚ÇÄ = Start/Initial State    -> A
F = Final states            -> B
ùù≥ = Maps Q x Œ£ -> 2·µ† (where that symbol is Q. Just no superscript version in normal language)
2 ^ Q is just the power set of Q, ie all the subsets of Q. The number of elements in this set is also equal to 2 ^ number of elements in Q.
If we have above Q. Here the 2·µ† indicates how A can go to A, B, AB, or œÜ as all possible situations in the worst case scenario

.    0      1
A   A,B     A
B    œÜ      œÜ

Comparison to DFA
Similarities => 
We have a start state and end state

Differences =>
Doesn't need to be complete to have the NFA finished.
May have multiple next states.

Video 12:
For behaviour of NFA:
1) Always start from the starting state
2) If there is only one possible transition, then go to that
3) If there are two transitions, you need to consider from multiple states like a branching tree.
4) YOU NEED TO CHECK FOR BOTH STATES!
5) If there is no transition, it goes to œÜ
6) If at any point it reaches accepting state at the end of input, that string is accepted.
Definition: If machine ends in any set of states which at least one of them is the final state, then NFA accepts.

Video 13:
L = Set of strings that start with 0.
1) Sometimes NFA looks similar to DFA without the fluff, that is fine and completely possible!
2) If a state enters œÜ, that is a dead configuration. 
Video 14:
More examples of NFA's.

Video 15:
To convert => Every DFA is an NFA, but not every NFA is a DFA. And also, there is an equivalent DFA for every NFA.
So if you have a DFA, its technically also a NFA, but if you have a NFA, you might need to convert it to a DFA.
Proof: Only the ùù≥ (Transition Function) was different.
For DFA it was Q x Œ£ -> Q but for NFA it was Q x Œ£ -> 2·µ†
And Q is a part of 2·µ† so DFA is a part of the NFA.

Steps: Make state transition Diagram for the NFA
+   0   1
A   B   œÜ
B   B   B

Replace the empty state with dead state, C maybe and then also mention the inputs for any new states generated.
+   0   1
A   B   C
B   B   B
C   C   C

Where A is the starting state and B is the final state.
Hence we converted the NFA to equivalent DFA.

Video 16: 
Steps: Make state transition Diagram for the NFA
+   0     1
A   A   {A,B}
B   œÜ     œÜ

** WHEN WE HAVE MULTIPLE INPUTS, COMBINE THEM INTO 1 ** for the DFA
Also, no need to write states that cannot be reached from the start states during input.
+       0     1
A       A    A.B
B - Not needed as cannot be reached from a
A.B     ?     ?

Now to complete the above table, you need to look at the NFA and perform union operations on the individual states.
So A union B or A.B means performing union function for the 0 and 1 inputs, hence NFA becomes
+     0     1
A     A   {A,B}
B     œÜ     œÜ
A.B   A   {A,B}

After this, convert to the DFA table!
+       0     1
A       A    A.B
B - Not needed as cannot be reached from a
A.B     A    A.B

* Here, A.B isn't A union B but a third variable, similar to AB but easier to understand.
* Since after here, there's no way to reach state B, no need to draw for B

This method is known as SUBSET CONSTRUCTION METHOD

Video 17:
1) Obviously during union operation, repeated elements are just removed as a part of the union function.
2) If you union two individual elements, B and C for example, you give rise to a third element, BC which is formed from their Union
3) NEVER FORGET that you then also have to define for the BC element the state transition diagram in ùù≥
4) Don't forget about dead states too ofc. They always end up on themselves as trapped states, and replace œÜ in NFA.
5) Final states are all the states that contain the final state in NFA equivalent. For example, if its C, then for the DFA, it has to be C, BC, and AC as well if present
