Youtube: Neso Academy
Video 11:
Definition of NFA => 
Defined using 5 tuples: (Q, Σ, q₀, F, 𝝳)
Q = Set of all states       -> {A, B}
Σ = Input                   -> {0, 1}
q₀ = Start/Initial State    -> A
F = Final states            -> B
𝝳 = Maps Q x Σ -> 2ᵠ (where that symbol is Q. Just no superscript version in normal language)
2 ^ Q is just the power set of Q, ie all the subsets of Q. The number of elements in this set is also equal to 2 ^ number of elements in Q.
If we have above Q. Here the 2ᵠ indicates how A can go to A, B, AB, or φ as all possible situations in the worst case scenario

.    0      1
A   A,B     A
B    φ      φ

Comparison to DFA
Similarities => 
We have a start state and end state

Differences =>
Doesn't need to be complete to have the NFA finished.
May have multiple next states.

Video 12:
For behaviour of NFA:
1) Always start from the starting state
2) If there is only one possible transition, then go to that
3) If there are two transitions, you need to consider from multiple states like a branching tree.
4) YOU NEED TO CHECK FOR BOTH STATES!
5) If there is no transition, it goes to φ
6) If at any point it reaches accepting state at the end of input, that string is accepted.
Definition: If machine ends in any set of states which at least one of them is the final state, then NFA accepts.

Video 13:
L = Set of strings that start with 0.
1) Sometimes NFA looks similar to DFA without the fluff, that is fine and completely possible!
2) If a state enters φ, that is a dead configuration. 
Video 14:
More examples of NFA's.

Video 15:
To convert => Every DFA is an NFA, but not every NFA is a DFA. And also, there is an equivalent DFA for every NFA.
So if you have a DFA, its technically also a NFA, but if you have a NFA, you might need to convert it to a DFA.
Proof: Only the 𝝳 (Transition Function) was different.
For DFA it was Q x Σ -> Q but for NFA it was Q x Σ -> 2ᵠ
And Q is a part of 2ᵠ so DFA is a part of the NFA.

Steps: Make state transition Diagram for the NFA
+   0   1
A   B   φ
B   B   B

Replace the empty state with dead state, C maybe and then also mention the inputs for any new states generated.
+   0   1
A   B   C
B   B   B
C   C   C

Where A is the starting state and B is the final state.
Hence we converted the NFA to equivalent DFA.

Video 16: 
Steps: Make state transition Diagram for the NFA
+   0     1
A   A   {A,B}
B   φ     φ

** WHEN WE HAVE MULTIPLE INPUTS, COMBINE THEM INTO 1 ** for the DFA
Also, no need to write states that cannot be reached from the start states during input.
+       0     1
A       A    A.B
B - Not needed as cannot be reached from a
A.B     ?     ?

Now to complete the above table, you need to look at the NFA and perform union operations on the individual states.
So A union B or A.B means performing union function for the 0 and 1 inputs, hence NFA becomes
+     0     1
A     A   {A,B}
B     φ     φ
A.B   A   {A,B}

After this, convert to the DFA table!
+       0     1
A       A    A.B
B - Not needed as cannot be reached from a
A.B     A    A.B

* Here, A.B isn't A union B but a third variable, similar to AB but easier to understand.
* Since after here, there's no way to reach state B, no need to draw for B

This method is known as SUBSET CONSTRUCTION METHOD

Video 17:
1) Obviously during union operation, repeated elements are just removed as a part of the union function.
2) If you union two individual elements, B and C for example, you give rise to a third element, BC which is formed from their Union
3) NEVER FORGET that you then also have to define for the BC element the state transition diagram in 𝝳
4) Don't forget about dead states too ofc. They always end up on themselves as trapped states, and replace φ in NFA.
5) Final states are all the states that contain the final state in NFA equivalent. For example, if its C, then for the DFA, it has to be C, BC, and AC as well if present

Video 20:
Minimization of DFA - Required to obtain minimal version of DFA with minimum number of states possible.
Use equivalence test. Two sets are equivalent if both seeing a particular input go to the same final state F or don't go to the same state.

If |X| = 0, then A and B are 0 equivalent.
. . . if |X| = n, then A and B are n equivalent.
This property is used to combine DFA's using the table for the DFA.

Video 21:
Start by writing 0 equivalence.
Pair all the non-final states together and final states as another set.
Write 1 equivalence using 0 equivalence. Check where A and B go and if they fall in the same set, then they are equivalent.
You go till the same equivalent row repeats. Once it does, that's the end of pairing.

Video 22: 
You need to compare each and every element with other states if they happen to be non-equivalent to one another.

Video 23:
For multiple final states, we do the same, but group final states together as said before previously.
Check if the states in the same set are equivalent or not. 
If A is equivalent to B and C is equivalent to B, then A is also equivalent to C.
Each set becomes a state. And the directions just go to the set containing that specific state.

Video 24:
Example of minimization when there are unreachable states involved. [Unreachable if no way to reach from initial state]
For this, just remove the unreachable state F, and minimize with everything else.

Video 25:
Myhill Node theorem - Table filling method.
1.    Draw a table for all pairs of state (P,Q)
2.    Mark all pairs where P belongs to final state, and Q doesn't belong to final state.
3.    If there are any unmarked pairs, such that transition of P on x and Q on x is marked, then mark (P,Q). Repeat till no more markings left
4.    Combine unmarked pairs and make single state in DFA.

- Draw a grid. And remove the top half from diagonal. We don't need (A,A), (B,B) ... etc pairs.
- If one is a final state, and other is not, mark it in grid.
- Keep doing this for round 1.
- Transition checking, for pair (B,A) check (B, input 0) -> A and (A, input 0) -> B
So AB is where (B,A) pair goes on input 0. Check if AB is marked, if it isn't, then don't mark. 
Now check for input 1, we see it goes to (B,1) -> D, (A,1) -> C. DC is unmarked, don't do anything.
Also, if you get (A,B , 1) -> E , ie both go to E on input 1, then it remains untouched. 
- Do this for all cells, and repeat till you don't mark 
- Final answer just combine all states on the diagram and you're good to go.
