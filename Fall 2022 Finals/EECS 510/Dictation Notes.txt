-> Dictation Method of taking notes
Why study automata theory? 
Finite automata. Useful model for many important kinds of hardware and software.

For example: 
1) Designing and checking behavior of digital circuits. 
2) Lexical analyzer of typical compiler 
3) Scanning large bodies of text 
4) Verifying system of all types that have finite number of distinct states. 

There are many systems or components that may be viewed as being at all times in a finite number of states. 
Purpose of states: Remember the relevant portion of systems history. 
Advantages of finite states is that we can implement with a fixed set of resources. For example, on and off switch where the input is just one button. 
Pushing it checks/remembers the last state, "off" or "on". Then, swap the state when the button is pushed. 
One of the states is the start state, in our example the "off". 
Also necessary to indicate one or more states as the final state 

Another example could be to recognize the keyword "then". 
Each position in the word "then" has to be reached by each of the letters. 
These positions correspond to the prefixes of the word ranging from empty string to the complete word.  
Since the job of this automaton is to recognize when then has been seen. We consider that state to be the lone accepting state. 

Structural representations. 
1. Grammars are useful models when designing software that process data with a recursive structure. For example parser. 
2. Regular expressions remove the structure of data, especially text strings. 

Automata and complexity. 
Automata are essential for the study of limits of computation. Two important issues: 
1, what can a computer do? Decidability 
2, What can a computer do efficiently? Intractability. 

Introduction to formal proof. 
To make your proof correct, set up an inductive hypothesis. And it is helpful to reason, formally or informally, that the hypothesis is consistent with the iteration or recursion. 

Deductive proofs. 
Deductive proof consists of sequence of statements whose truth leads us from some initial statement, that is the hypothesis or the given statement to a conclusion statement. 
Each step must follow an accepted logical principle. Or some of the previous statements in the deductive proof. 
The hypothesis may be true or false. Often Consists of several independent statements connected by a logical AND. 

The theorem is proved when we go from a hypothesis to a conclusion. That is, if H then C -> C is deducted from H. 

The rule: Modus ponens is if we know is true and we know if H then C is true, we may conclude that C is true. 
We may also use if A & B are two previous statements, we can deduce and write down statement A and B. 
Each statement has to be followed by a justification as mentioned above. 

Reductions to Definitions. 
Theorems may use, terms such as integers, additions and multiplications. 
In many theorems, including many from automata theory, the terms used in the statements may have implications that are less obvious.  
A useful way to proceed proofs is to convert all terms in the hypothesis to their definitions. 
Many theorems involve statements that use quantifiers, “for all” and “there exists”, or similar variations, such as “for every” instead of “for all”. 
The order of these quantifiers is what the statement means. 

Other theorem forms. 
If, then form is the most common in typical areas of mathematics. 
Ways of saying if then: If hypothesis is true for a given value of parameters, then the conclusion C is true for the same value. 
Here some of the other ways to say that:
#1 H implies C 
#2 H only if C 
#3 C if H 
#4 Whenever H holds, C follows. 

Sometimes statements may be of the form “A if and only if B. Other forms of this statement are, “A iff B”, or “A exactly when B” 
This statement is actually two if-then statements: “If A then B” & “If, B then A.” 
The only if part: (“if A then B” which is often stated in the equivalent form “A only if B”) is used to prove “A if and only if B”. 

Additional forms of proof 
1, Proofs about sets 
2, Proofs by contradiction 
3, Proofs by counterexample 

A way to prove a statement of the form if then C is to prove the statement H and not C implies falsehood. 

Theorems generally are statements about an infinite number of cases, perhaps all values of its parameters 
To resolve whether a theorem is true or not, we may try to prove the theorem, or alternatively try to prove that the statement is false. 
Statements that have no parameters or apply to only a finite number of values of its parameters are called observations. 

Inductive proofs 
There is special form of proof called inductive that is essential when dealing with recursively defined objects. 
In automata theory, we also need inductive proofs about such recursively defined concepts as trees and expressions of various sorts. 

In automata theory, there are several recursively defined structures about which we need to prove statements. 
Like induction, all recursive definitions have a basis case where one or more elementary structures are defined, 
and an inductive case where one or more complex structures are defined in terms of previously defined structures. 

Sometimes we cannot prove a single statement by induction, but rather need to prove a group of statements together by induction of N.  
Strictly speaking, proving a group of statements is no different from proving the conjunction (logical AND) of all the statements. 
When there are really several independent statements to prove, it is generally less confusing to keep the statements separate and 
to prove them all in their own paths of the basis and inductive steps. We call this sort of proof mutual induction. 

Central concepts of automata theory 
Alphabet: Finite set of symbols
Strings: A list of symbols from an alphabet. 
Language: a set of strings from the same alphabet. 

An alphabet is a finite nonempty set of symbols. We use the summation symbol for alphabet.

A string, or sometimes word, is a finite sequence of symbols chosen from some alphabet. 
The empty string is the string with zero occurrences of the symbols. This string, denoted epsilon, is a string that may be chosen from any alphabet. 
It is common to say that the length of a string is the number of symbols in the string. You can also expect to use number of positions. 
The standard notation for the length of a string w is |w|. For any alphabet, we can express the set of all strings of a certain length by using the exponential notation. 
Epsilon is the only string whose length is 0. The set of all strings over an alphabet is conventionally denoted by raising the symbol (summation) to the power of a *. 
Sometimes we wish to exclude the empty string from the set of strings, which is denoted by raising it to the power of + 
Commonly, we shall use lowercase letters at the beginning of the alphabet to denote symbols, and lowercase letters near the end of the alphabet to denote strings. 

A set of strings, all of which are chosen from some set of alphabets* is called a language. 
L is set to be the language over the alphabet. Notice that the language over the alphabet needs not include strings with all the symbols of the alphabet. 
The only important constraint on what can be a language is that all alphabets are finite. 

A problem is the question of deciding whether a given string is a member of some particular language. 
Given a string w, in set of all alphabets, decide whether or not w is in language L. 
It is common to describe a language using the set former - {w | some expression about w}

Set former: This expression is read as "the set of words such that (whatever is said about W to the right of the vertical bar)". 
It is also common to replace the string by some expression with parameters and describe the strings in the language by stating conditions on the parameters. 

Summary of terms 
Finite automata: Finite automata involves States and transitions among states in response to inputs. They're useful for building several different kinds of software. 
Regular expressions: These are structural notation for describing the same patterns that can be represented by finite automata. Used for searching patterns in text or in file names. 
Context free grammar: These are an important notation for describing the structure of programming languages and related sets of strings; 
They are used to build the parser component of a compiler. 

During machines; Deductive proofs; Proving if then statements; Proving if and only if statements; Proving the contrapositive; Proof by contradiction; 
Counterexamples; Inductive proofs; Structural induction; Alphabets; Strings; Languages and problems.

------------------------------------------------------------------------------------END OF CHAPTER 1------------------------------------------------------------------------------------
