Scope of Software Engineering: Life-Cycle Models, Software Process, Teams, Tools, Testing, Planning, and Estimating

Software products: Generic Software Systems (provide useful functionality to a range of customers)
Example: large-scale business systems (MS Excel); personal products (Evernote); simple apps/games (Suduko)
Software Engineering Techniques = One-off, Custom Software Systems
Customer has Problems (generates) Requirements for Customer and Developer (implemented by) Developer through Software (helping with) Customers Problem

Project-Based Software Engineering
Starting point: Set of ‘software requirements’ wanted by an external client to support their business processes
Developed by: Company (contractor) who designs and implements a system to deliver functionality.
Customer may request changes that contractor must reflect.
Custom software has a long lifecycle of support (10 years).

Product Software Engineering
Starting point: Business opportunity identified by individual or company, who then develop to take advantage of this opportunity.
Company/Individual design and implement features that realise opportunity and will be useful.
Software development company are responsible for deciding the development timescale, features and changes.
Rapid delivery of product is essential to capture the market.

Software product line
A set of software products that share a common core. Each member of the line has customer-specific adaptations that may be used to implement custom system for customer
that cannot be met by generic software.

Platform
Software product that includes functionality to build new applications on it. Example: Facebook/Facebook apps. 

Software Execution Models:
1) Stand-Alone - Executes entirely on customer's computer
2) Hybrid - Part of it is on customer's computer, and some features are implemented on developer's server
3) Software Service - All services on server and accessed through browser/mobile app
Various splits of User Interface, Product functionality, User data, and Product updates. Hybrid includes User Data Backups

Relation between UML and programming languages: 
UML = Concepts without counterparts
- Java: Language specific details
Union = Directly mappable parts

/ implies derived attribute
$ implies static attribute

---------------------------------------------------------------------------------------------------------

Software services:
1) Software service: Software component that can be accessed via remote computer. Give input, produces output.
    Accessible through published interface, implementation hidden
    No internal state maintained. Information stored in database or maintained by service requestor.
2) When request made, state information may be included as a part of the request, updated information returned
as a part of the result.
3) Services dynamically reallocated, and replicated across servers.

1990's - Service oriented computing
early 200's - 'big' Web Services
XML Based protocols:
    SOAP - Service interaction
    WSDL - Service description
Software services don’t need the generality inherent in web service protocols. 
Modern service systems use lighter interaction protocols with lower overhead and faster execution.

Microservices:
Small-scale, stateless services.
Have single responsibility.
Combined to create applications.
Independant with own database and UI management code.
Software require microservice architecture.
Adaptable, scaleable, and resilient.

Example: Registration, System Authentication, Two factor, UID/Password, Reset forgotten.
Each feature can be implemented as a separate service with shared database holding authentication information.

Too large to be microservice, need to be broken down.
User registration: Setup login id, Setup password, Setup recovery info, Setup two-factor, Confirm registration.
Authenticate: Get id, Get password, Check credentials, Confirm authentication.

Authentication has three parts-
    UID Management <---> UID Data
    Password Management <---> Password Data
    User Info Management <---> User data

Characteristics of microservices:
Self contained - No external dependencies. Manage own data and implement own interface.
Lightweight - Lightweight protocols for communication means low overhead.
implementation-Independant - May be implemeneted using different programming languages and technologies. 
Independently deployable - Runs own process and independently deployable using automated systems.
Business-oriented - Implement business needs and capabilities than providin technical service.
Well designed = High Cohesion and Low Coupling. 
    Cohesion > Measure of number of relationships parts of components have among them. High cohesion is that all parts
    for functionality of component are included in the component.
    Coupling > Measure of number of relationships between components in the system. Low coupling means components aren't
    related much.
Each microservice should have a single responsibility, and it should do it well. (Bit hard to define, not necessarily
single functional activity)

Microservice Communication
Microservices Communicate by exchanging messages. Messages sent includes admin info, service request and data required
Services return a response to the service request message.

Microservice architecture is architectural style - a tried/tested way of implementing a logical software architecture.
Addresses 2 problems w/ monolithic application - whole system rebuilt and redeployed over small change, changes might 
adversely affect other components. Demand on system increase, whole system needs scaled even if demand is localized
only to most popular system functions.

Benefits:
Self-contained and run in separate processes.
Cloud based: Deployed in own container. Stopped/restarted without affecting everything else.
Demand of service increase, replicas quickly created. Much cheaper than scaling up.

Decomposition guidelines:
    - Balance fine-grain functionality and system performance: Limited changes to fewer services, but causes more server
    communication to implement functionality. Slows down system.
    - Follow common closure principal: Similar elements located in same service. New changes affect single service.
    - Associate service with business capabilities: Identify services required to support each business capability.
    - Design services with access to only the need-to-have data.
    
Services communicate information data input output from request. Designing standard key, synchronity, method direct or broker, protocol.
Synchronous - A request, suspend B process and return resume. 
Asynchronous - 