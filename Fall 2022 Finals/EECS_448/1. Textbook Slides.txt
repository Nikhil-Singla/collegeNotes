Scope of Software Engineering: Life-Cycle Models, Software Process, Teams, Tools, Testing, Planning, and Estimating

Software products: Generic Software Systems (provide useful functionality to a range of customers)
Example: large-scale business systems (MS Excel); personal products (Evernote); simple apps/games (Suduko)
Software Engineering Techniques = One-off, Custom Software Systems
Customer has Problems (generates) Requirements for Customer and Developer (implemented by) Developer through Software (helping with) Customers Problem

Project-Based Software Engineering
Starting point: Set of ‘software requirements’ wanted by an external client to support their business processes
Developed by: Company (contractor) who designs and implements a system to deliver functionality.
Customer may request changes that contractor must reflect.
Custom software has a long lifecycle of support (10 years).

Product Software Engineering
Starting point: Business opportunity identified by individual or company, who then develop to take advantage of this opportunity.
Company/Individual design and implement features that realise opportunity and will be useful.
Software development company are responsible for deciding the development timescale, features and changes.
Rapid delivery of product is essential to capture the market.

Software product line
A set of software products that share a common core. Each member of the line has customer-specific adaptations that may be used to implement custom system for customer
that cannot be met by generic software.

Platform
Software product that includes functionality to build new applications on it. Example: Facebook/Facebook apps. 

Software Execution Models:
1) Stand-Alone - Executes entirely on customer's computer
2) Hybrid - Part of it is on customer's computer, and some features are implemented on developer's server
3) Software Service - All services on server and accessed through browser/mobile app
Various splits of User Interface, Product functionality, User data, and Product updates. Hybrid includes User Data Backups

Relation between UML and programming languages: 
UML = Concepts without counterparts
- Java: Language specific details
Union = Directly mappable parts

/ implies derived attribute
$ implies static attribute

